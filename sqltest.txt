# SQL Test Assignment

Attached is a mysqldump of a database to be used during the test.

Below are the questions for this test. Please enter a full, complete, working SQL statement under each question. We do not want the answer to the question. We want the SQL command to derive the answer. We will copy/paste these commands to test the validity of the answer.

**Example:**

_Q. Select all users_

- Please return at least first_name and last_name

SELECT first_name, last_name FROM users;


------

**— Test Starts Here —**

1. Select users whose id is either 3,2 or 4
- Please return at least: all user fields

2. Count how many basic and premium listings each active user has
- Please return at least: first_name, last_name, basic, premium

---
select u.id, t1.basic, t2.Premium
from users u
left join (SELECT l.user_id, COUNT(l.user_id) as basic  FROM `listings` l WHERE l.status =2
GROUP By l.user_id) as t1
on u.id = t1.user_id
left join (SELECT l.user_id, COUNT(l.user_id) as Premium  FROM `listings` l WHERE l.status =3
GROUP By l.user_id) as t2
on u.id = t2.user_id
where u.status = 2
----

3. Show the same count as before but only if they have at least ONE premium listing
- Please return at least: first_name, last_name, basic, premium
----

select u.id, t1.basic, t2.Premium
from users u
left join (SELECT l.user_id, COUNT(l.user_id) as basic  FROM `listings` l WHERE l.status =2
GROUP By l.user_id) as t1
on u.id = t1.user_id
left join (SELECT l.user_id, COUNT(l.user_id) as Premium  FROM `listings` l WHERE l.status =3
GROUP By l.user_id) as t2
on u.id = t2.user_id
where u.status = 2
GROUP by u.id, t1.basic, t2.Premium
HAVING t2.Premium>0

---
4. How much revenue has each active vendor made in 2013
- Please return at least: first_name, last_name, currency, revenue
---
SELECT u.first_name,u.last_name,Sum(c.price), c.currency FROM `clicks` c 
join listings l on c.listing_id = l.id
join users u on l.user_id = u.id
WHERE YEAR(c.created)  = 2013
and u.status = 2 
group by c.currency,u.first_name,u.last_name
---
5. Insert a new click for listing id 3, at $4.00
- Find out the id of this new click. Please return at least: id
----
INSERT INTO clicks(lisitng_id, price) VALUES ('3', '$4.00');
SELECT LAST_INSERT_ID();
---

6. Show listings that have not received a click in 2013
-----
SELECT l.id from listings l
left join clicks c on l.id = c.listing_id and Year(c.created) = 2013

GROUP BY l.id
HAVING COUNT(c.listing_id) = 0
-------
7. For each year show number of listings clicked and number of vendors who owned these listings
- Please return at least: date, total_listings_clicked, total_vendors_affected
-------------------------------------
SELECT Year(c.created),Count(DISTINCT c.listing_id), COUNT(DISTINCT l.user_id) from listings l
join clicks c on l.id = c.listing_id

group by Year(c.created)
---------------------------------
8. Return a comma separated string of listing names for all active vendors
- Please return at least: first_name, last_name, listing_names

---

SELECT u.first_name,u.last_name,GROUP_CONCAT(l.name SEPARATOR ', ') from users u
join listings l on u.id = l.user_id

where u.STATUS = 2
GROUP BY u.id

----